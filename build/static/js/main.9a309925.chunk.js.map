{"version":3,"sources":["Components/TodoItem.js","Components/Todos.js","Components/Header.js","Components/AddItem.js","Components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","_this","props","todo","completed","_this$props$todo","this","id","title","react_default","a","createElement","style","type","onChange","markComplete","bind","btnStyle","onClick","deleteItem","Component","color","border","cursor","float","Todos","todos","map","Components_TodoItem","key","linkStyle","headerStyle","textAlign","Header","react_router_dom","to","AddItem","state","changing","e","setState","Object","defineProperty","target","name","value","submitting","preventDefault","addItem","onSubmit","display","placeholder","flex","className","About","Fragment","App","axios","delete","concat","then","response","toConsumableArray","filter","post","data","_this2","get","res","console","log","_this3","Components_Header","react_router","exact","path","render","Components_AddItem","Components_Todos","pages_About","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAIMA,oNACFC,SAAW,WACP,MAAO,CACHC,WAAY,UACZC,QAAS,OACTC,aAAc,kBACdC,eAAgBC,EAAKC,MAAMC,KAAKC,UAAY,eAAiB,iFAI5D,IAAAC,EAEeC,KAAKJ,MAAMC,KAAxBI,EAFFF,EAEEE,GAAIC,EAFNH,EAEMG,MACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAON,KAAKV,YACba,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,WAAWC,SAAUR,KAAKJ,MAAMa,aAAaC,KAAKV,KAAMC,KACnEC,EACDC,EAAAC,EAAAC,cAAA,UAAQC,MAAOK,EAAUC,QAASZ,KAAKJ,MAAMiB,WAAWH,KAAKV,KAAMC,IAAnE,cAlBGa,cA4BjBH,EAAW,CACbpB,WAAY,UACZwB,MAAO,QACPC,OAAQ,OACRxB,QAAS,WACTyB,OAAQ,UACRC,MAAO,SAOI7B,ICnBA8B,mLAjBF,IAAAxB,EAAAK,KAEL,OAAOA,KAAKJ,MAAMwB,MAAMC,IAAI,SAACxB,GAAD,OAExBM,EAAAC,EAAAC,cAACiB,EAAD,CAAUC,IAAK1B,EAAKI,GAAIJ,KAAMA,EAAMY,aAAcd,EAAKC,MAAMa,aACnDI,WAAYlB,EAAKC,MAAMiB,sBARzBC,aCMpB,IAAMU,EAAY,CACdT,MAAO,QACPrB,eAAgB,QAGd+B,EAAc,CAChBlC,WAAY,OACZwB,MAAO,OACPW,UAAW,SACXlC,QAAS,QAEEmC,EApBf,WACI,OACIxB,EAAAC,EAAAC,cAAA,UAAQC,MAAOmB,GACXtB,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMtB,MAAOkB,EAAWK,GAAG,KAA3B,QAFJ,MAEiD1B,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMtB,MAAOkB,EAAWK,GAAG,SAA3B,mBCyC1CC,6MA3CXC,MAAQ,CACJ7B,MAAO,MAIX8B,SAAW,SAACC,GAAD,OAAOtC,EAAKuC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACbF,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,WAG9BC,WAAa,SAACP,GACVA,EAAEQ,iBACF9C,EAAKC,MAAM8C,QAAQ/C,EAAKoC,MAAM7B,OAC9BP,EAAKuC,SAAS,CAAChC,MAAO,8EAOtB,OACIC,EAAAC,EAAAC,cAAA,QAAMsC,SAAU3C,KAAKwC,WAAYlC,MAAO,CAACsC,QAAS,SAC9CzC,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OACL+B,KAAK,QACLO,YAAY,cACZN,MAAOvC,KAAK+B,MAAM7B,MAClBI,MAAO,CAACwC,KAAM,GAAItD,QAAS,OAC3BgB,SAAUR,KAAKgC,WAEtB7B,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SACLgC,MAAM,SACNQ,UAAU,MACVzC,MAAO,CAACwC,KAAM,aAhCfhC,aCMPkC,MARf,WACI,OACI7C,EAAAC,EAAAC,cAACF,EAAAC,EAAM6C,SAAP,KACI9C,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,2FCuEG6C,6MAjEXnB,MAAQ,CACJX,MAAO,MAaXX,aAAe,SAACR,GACZN,EAAKuC,SAAS,CACVd,MAAOzB,EAAKoC,MAAMX,MAAMC,IAAI,SAAAxB,GAIxB,OAHIA,EAAKI,KAAOA,IACZJ,EAAKC,WAAaD,EAAKC,WAEpBD,SAKnBgB,WAAa,SAACZ,GACVkD,IAAMC,OAAN,8CAAAC,OAA2DpD,IACtDqD,KAAK,SAAAC,GAAQ,OAAI5D,EAAKuC,SAAS,CAC5Bd,MAAMe,OAAAqB,EAAA,EAAArB,CAAKxC,EAAKoC,MAAMX,MAAMqC,OACxB,SAAArC,GACI,OAAOA,EAAMnB,KAAOA,YAKxCyC,QAAU,SAACxC,GACPiD,IAAMO,KAAK,6CAA8C,CAACxD,UACrDoD,KAAK,SAAAC,GAAQ,OAAI5D,EAAKuC,SAAS,CAACd,MAAK,GAAAiC,OAAAlB,OAAAqB,EAAA,EAAArB,CAAMxC,EAAKoC,MAAMX,OAAjB,CAAwBmC,EAASI,+FAhC3D,IAAAC,EAAA5D,KAChBmD,IAAMU,IAAI,wDAAwDP,KAAK,SAAAQ,GACnEF,EAAK1B,SAAS,CAACd,MAAO0C,EAAIH,OAC1BI,QAAQC,IAAIF,EAAIH,yCAgCf,IAAAM,EAAAjE,KACL,OACIG,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACIzB,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,OACX5C,EAAAC,EAAAC,cAAA,OAAK0C,UAAU,aACX5C,EAAAC,EAAAC,cAAC6D,EAAD,MACA/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAA1E,GAAK,OAC/BO,EAAAC,EAAAC,cAACF,EAAAC,EAAM6C,SAAP,KAEI9C,EAAAC,EAAAC,cAACkE,EAAD,CAAS7B,QAASuB,EAAKvB,UACvBvC,EAAAC,EAAAC,cAACmE,EAAD,CAAOpD,MAAO6C,EAAKlC,MAAMX,MAAOX,aAAcwD,EAAKxD,aAC5CI,WAAYoD,EAAKpD,kBAKpCV,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOE,KAAK,SAASC,OAAQ,SAAA1E,GAAK,OAC9BO,EAAAC,EAAAC,cAACoE,EAAD,kBA3DN3D,aCEE4D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAST,OAAOnE,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.9a309925.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Todos from \"./Todos\";\r\n\r\nclass TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    };\r\n\r\n    render() {\r\n        // destructuring the props property in the component class.\r\n        const {id, title} = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}/>\r\n                    {title}\r\n                    <button style={btnStyle} onClick={this.props.deleteItem.bind(this, id)}>x</button>\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// proptypes\r\n\r\n//\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: 'white',\r\n    border: 'none',\r\n    padding: '5px 10px',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n};\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteItem: PropTypes.func.isRequired,\r\n};\r\nexport default TodoItem\r\n","import React, {Component} from 'react'\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\nimport '../App.css';\r\n\r\n// class\r\nclass Todos extends Component {\r\n\r\n    //render function\r\n    render() {\r\n        // the render function returning a JSX element.\r\n        return this.props.todos.map((todo) => (\r\n\r\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n                      deleteItem={this.props.deleteItem}/>\r\n        ));\r\n    }\r\n}\r\n\r\n// proptypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    deleteItem: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>React Framework todolist</h1>\r\n            <Link style={linkStyle} to='/'>Home</Link> | <Link style={linkStyle} to='About'>About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst linkStyle = {\r\n    color: 'white',\r\n    textDecoration: 'none'\r\n};\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n};\r\nexport default Header;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nclass AddItem extends Component {\r\n    state = {\r\n        title: ''\r\n    };\r\n\r\n\r\n    changing = (e) => this.setState({\r\n        [e.target.name]: e.target.value\r\n    });\r\n\r\n    submitting = (e) => {\r\n        e.preventDefault();\r\n        this.props.addItem(this.state.title);\r\n        this.setState({title: ''})\r\n\r\n    };\r\n\r\n// Add todo\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitting} style={{display: 'flex'}}>\r\n                <input type=\"text\"\r\n                       name=\"title\"\r\n                       placeholder='Add Todo...'\r\n                       value={this.state.title}\r\n                       style={{flex: 10, padding: '5px'}}\r\n                       onChange={this.changing}\r\n                />\r\n                <input type=\"submit\"\r\n                       value=\"Submit\"\r\n                       className='btn'\r\n                       style={{flex: 1}}\r\n\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nAddItem.propTypes = {\r\n    addItem: PropTypes.func.isRequired,\r\n\r\n};\r\nexport default AddItem;\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is the todolist app version 1.0.0 and is made in react</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default About;\r\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport './App.css';\nimport Todos from './Components/Todos'\nimport Header from './Components/Header'\nimport AddItem from './Components/AddItem'\n// import uuid from 'uuid';\nimport About from './Components/pages/About'\nimport axios from 'axios'\n\nclass App extends Component {\n\n    state = {\n        todos: []\n    };\n\n    // ngOnit set state of todos to res.data.\n    componentDidMount() {\n        axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10').then(res => {\n            this.setState({todos: res.data});\n            console.log(res.data)\n        });\n    }\n\n\n    // toggle completed or not.\n    markComplete = (id) => {\n        this.setState({\n            todos: this.state.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            })\n        });\n    };\n\n    deleteItem = (id) => {\n        axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n            .then(response => this.setState({\n                todos: [...this.state.todos.filter(\n                    todos => {\n                        return todos.id !== id;\n                    }\n                )]\n            }));\n    };\n    addItem = (title) => {\n        axios.post('https://jsonplaceholder.typicode.com/todos', {title})\n            .then(response => this.setState({todos: [...this.state.todos, response.data]}))\n    };\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <div className=\"container\">\n                        <Header/>\n                        <Route exact path=\"/\" render={props => (\n                            <React.Fragment>\n\n                                <AddItem addItem={this.addItem}/>\n                                <Todos todos={this.state.todos} markComplete={this.markComplete}\n                                       deleteItem={this.deleteItem}/>\n                            </React.Fragment>\n                        )}/>\n                    </div>\n                    {/*About Route*/}\n                    <Route path='/About' render={props => (\n                        <About/>\n                    )}/>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}